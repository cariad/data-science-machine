#!/usr/bin/env bash
set -euo pipefail
sudo apt update -y
sudo apt upgrade -y
sudo apt autoremove -y

sudo apt install -y \
  ca-certificates   \
  git

curl https://repo.anaconda.com/archive/Anaconda3-2021.11-Linux-x86_64.sh -o conda.sh

if [[ "$(sha256sum conda.sh)" != "fedf9e340039557f7b5e8a8a86affa9d299f5e9820144bd7b92ae9f7ee08ac60  conda.sh" ]]; then
  echo "Anaconda hash failed."
  exit 1
fi

chmod +x conda.sh

# -b = noninteractive
./conda.sh -b

# info "Downloading AWS CLI"
# wget -O /tmp/aws.zip https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip
# pushd /tmp > /dev/null
# unzip -oq aws.zip
# rm aws.zip

# if command -v aws &> /dev/null
# then
#   info "Upgrading AWS CLI"
#   sudo ./aws/install --update
# else
#   info "Installing AWS CLI"
#   sudo ./aws/install
# fi

# rm -rf aws
# popd > /dev/null

# if ! command -v google-chrome &> /dev/null
# then
#   info "Installing Chrome"
#   wget -O /tmp/chrome.deb https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
#   sudo apt install /tmp/chrome.deb -y
#   rm -rf /tmp/chrome.deb
#   sudo ln -sf /opt/Obsidian/obsidian /usr/local/bin/obsidian
# fi

# if ! command -v obsidian &> /dev/null
# then
#   info "Installing Obsidian"
#   # The Obsidian team don't generate .deb installers for every release. They ask
#   # you to install the latest .deb then upgrade in-app. At the time of writing,
#   # this is the latest .deb.
#   wget -O /tmp/obsidian.deb "https://github.com/obsidianmd/obsidian-releases/releases/download/v0.12.15/obsidian_0.12.15_amd64.deb"
#   sudo apt install /tmp/obsidian.deb -y
#   rm -rf /tmp/obsidian.deb
# fi

# if ! command -v code &> /dev/null
# then
#   info "Installing Visual Studio Code"
#   wget -O /tmp/vs.deb "https://code.visualstudio.com/sha/download?build=stable&os=linux-deb-x64"
#   sudo apt install /tmp/vs.deb -y
#   rm /tmp/vs.deb
# fi

# info "Installing Node.js"
# curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
# sudo apt-get install -y nodejs

# # Perform all sudos as early as possible so the password is cached ^

# info "Installing home"

# mkdir -p "${HOME}/freyda"

# pushd home > /dev/null
# ln -sf "${PWD}/.bash_profile"       "${HOME}/.bash_profile"
# ln -sf "${PWD}/.gitconfig"          "${HOME}/.gitconfig"
# ln -sf "${PWD}/freyda/wev.user.yml" "${HOME}/freyda/wev.user.yml"
# popd > /dev/null

# if ! command -v git &> /dev/null
# then
#   info "Installing Git"
#   sudo apt install git -y
# fi

# if [ ! -d "${HOME}/.machine.secrets" ]
# then
#   # Intentionally use HTTP authentication since we don't have our SSH keys yet:

#   echo "⚠️  Visit https://github.com/settings/tokens/new to create a GitHub"
#   echo "⚠️  personal access token. The token can be revoked after"
#   echo "⚠️  machine.secrets has been cloned; your cloned SSH key will be used"
#   echo "⚠️  for subsequent pulls."
#   git clone https://github.com/cariad/machine.secrets.git "${HOME}/.machine.secrets"
# else
#   info "Updating machine.secrets"
#   pushd "${HOME}/.machine.secrets" > /dev/null
#   git pull git@github.com:cariad/machine.secrets.git
#   popd > /dev/null
# fi

# info "Restoring SSH keys"
# ln -sf "${HOME}/.machine.secrets/.ssh/config"         "${HOME}/.ssh/config"
# ln -sf "${HOME}/.machine.secrets/.ssh/id_ed25519"     "${HOME}/.ssh/id_ed25519"
# ln -sf "${HOME}/.machine.secrets/.ssh/id_ed25519.pub" "${HOME}/.ssh/id_ed25519.pub"

# if [ ! -d "${HOME}/.pyenv" ]
# then
#   info "Cloning pyenv"
#   git clone https://github.com/pyenv/pyenv.git "${HOME}/.pyenv"
# else
#   info "Pulling pyenv"
#   pushd "${HOME}/.pyenv" > /dev/null
#   git pull https://github.com/pyenv/pyenv.git
#   popd > /dev/null
# fi

# info "Compiling pyenv extension"
# pushd "${HOME}/.pyenv" > /dev/null
# src/configure
# make -C src
# popd > /dev/null

# source ~/.bash_profile

# info "Installing Python ${PYENV_VERSION}"
# pyenv install "${PYENV_VERSION}" --skip-existing

# info "Installing pipenv"
# pip install --upgrade pipenv

# info "Installing wev"
# pip install --upgrade wev
# pip install --upgrade wev-awscodeartifact

# info "Restoring GnuPG keys"
# gpg --import              ~/.machine.secrets/.gnupg/secret.txt
# gpg --import-ownertrust < ~/.machine.secrets/.gnupg/trust.txt

# info "Done!"
